#include "imports/stdlib.fc";


;; storage#_ microusd_per_ton: uint32  // 2.3232 USD -> 2323200
;;     interest_rate: uint16  // 1% -> 100
;;     min_cr: uint16  // 1.5 -> 1500
;;     last_update: uint64
;;     vaults: (HashmapE 267 Vault)
;;     oracle_address: MsgAddressInt
;;     jetton_master_address: MsgAddressInt
;;     jetton_wallet_code: ^Cell
;;     = Storage;

const int op::update_price = 0x1;
const int op::borrow = 0x2;

(int, int, int, int, cell, slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_uint(32),
            ds~load_uint(16),
            ds~load_uint(16),
            ds_load_uint(64),
            ds~load_dict(),
            ds~load_msg_addr(),
            ds~load_msg_addr(),
            ds~load_ref());
}

() save_data(int microusd_per_ton, int interest_rate, int min_cr, int last_update, cell vaults, slice oracle_address, slice jetton_master_address, cell jetton_wallet_code) impure {
    set_data(begin_cell()
        .store_uint(microusd_per_ton, 32)
        .store_uint(interest_rate, 16)
        .store_uint(min_cr, 16)
        .store_uint(last_update, 64)
        .store_dict(vaults)
        .store_msg_addr(oracle_address)
        .store_msg_addr(jetton_master_address)
        .store_ref(jetton_wallet_code)
        .end_cell());
}

cell filter_by_dcr(cell vaults, int min_dcr) {
    ;; TODO: тут функция отсортировки по dcr. Только для MVP.
    ;; не предусмотрена ликвидация более 250 залогов.
    int s = true;
    while (s) {
        filter_by_dcr
    }
}

() update_price_from_oracle(slice in_msg_body, slice sender_address) {
    (int microusd_per_ton, int interest_rate, int min_cr, int last_update, cell vaults, slice oracle_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();

    throw_unless(600, equal_slices?(sender_address, oracle_address));

    int query_id = in_msg_body~load_uint(64);
    int new_microusd_per_ton = in_msg_body~load_uint(64);

    int new_min_dcr = min_cr * 1000 / new_microusd_per_ton

    microusd_per_ton = price;
    last_update = now();
    save_data(microusd_per_ton, interest_rate, mint_cr, last_update, vaults, oracle_address, jetton_master_address, jetton_wallet_code);
    send_msg(oracle_address, begin_cell().store_uint(query_id, 64).end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    if (op == op::update_price) {
        update_price_from_oracle(in_msg_body, sender_address);
        return ();
    }

    if (op == op::borrow) {
        
    }
}
